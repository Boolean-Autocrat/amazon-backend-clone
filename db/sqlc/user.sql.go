// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE users SET
    password = $1
WHERE id = $2
`

type ChangePasswordParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, changePassword, arg.Password, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users 
(
    username, password, email, phone_num
) VALUES 
(
    $1 , $2 , $3 , $4
) RETURNING ID, username, email, phone_num
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
	PhoneNum string `json:"phoneNum"`
}

type CreateUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
	PhoneNum string    `json:"phoneNum"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.PhoneNum,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNum,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getPassword = `-- name: GetPassword :one
SELECT password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPassword(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getPassword, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUser = `-- name: GetUser :one
SELECT ID, username, email, phone_num FROM users 
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Email    string    `json:"email"`
	PhoneNum string    `json:"phoneNum"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNum,
	)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT id FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserID(ctx context.Context, username string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserID, username)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
    username = $1,
    email = $2,
    phone_num = $3
WHERE id = $4
`

type UpdateUserParams struct {
	Username string    `json:"username"`
	Email    string    `json:"email"`
	PhoneNum string    `json:"phoneNum"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.PhoneNum,
		arg.ID,
	)
	return err
}
